{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","console","log","_createStore","e","target","result","onsuccess","bind","onerror","error","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;AAChC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;AAAA;;AAEnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/BC,gCAAQC,GAAR,CAAY,yBAAZ;AACA,8BAAKC,YAAL,CAAkBC,EAAEC,MAAF,CAASC,MAA3B;AACH,qBAHD;;AAKAV,gCAAYW,SAAZ,GAAwB,aAAK;AACzB,4BAAI,CAACjB,UAAL,EAAiB;AACbA,yCAAac,EAAEC,MAAF,CAASC,MAAtB;AACAf,oCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBATD;;AAWAM,gCAAYa,OAAZ,GAAsB,aAAK;;AAEvBd,+BAAOS,EAAEC,MAAF,CAASK,KAAhB;AACH,qBAHD;AAIH,iBAxBM,CAAP;AAyBH;AAjCL;AAAA;AAAA,yCAmCwBpB,UAnCxB,EAmCoC;;AAE5BH,uBAAOwB,OAAP,CAAe,iBAAS;AACpB,wBAAIrB,WAAWsB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD,OAAOxB,WAAWyB,iBAAX,CAA6BD,KAA7B,CAAP;AACjDxB,+BAAW0B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBAHD;AAIH;AAzCL;AAAA;AAAA,8CA2C6B;AACrB,oBAAI3B,UAAJ,EAAgB;AACZC;AACAD,iCAAa,IAAb;AACAW,4BAAQC,GAAR,CAAY,6BAAZ;AACH;AACJ;AAjDL;;AAAA;AAAA;AAmDH,CA3DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["let ConnectionFactory = (function() {\n    const stores = ['negociacoes']\n    const version = 7\n    const dbName = 'aluraframe'\n\n    let connection = null\n    let close = null\n\n    return class ConnectionFactory {\n\n        constructor() {\n            throw new Error(\"Connection Factory não pode ser instaciada\")\n        }\n\n        static getConnection() {\n\n            return new Promise((resolve, reject) => {\n\n                let openRequest = window.indexedDB.open(dbName, version)\n\n                openRequest.onupgradeneeded = e => {\n                    console.log('interceptando o upgrade')\n                    this._createStore(e.target.result)\n                }\n\n                openRequest.onsuccess = e => {\n                    if (!connection) {\n                        connection = e.target.result\n                        close = connection.close.bind(connection)\n                        connection.close = function() {\n                            throw new Error('Conexão só pode ser fechada pelo método closeConnection')\n                        }\n                    }\n                    resolve(connection)\n                }\n\n                openRequest.onerror = e => {\n\n                    reject(e.target.error)\n                }\n            })\n        }\n\n        static _createStore(connection) {\n\n            stores.forEach(store => {\n                if (connection.objectStoreNames.contains(store)) return connection.deleteObjectStore(store)\n                connection.createObjectStore(store, { autoIncrement: true })\n            })\n        }\n\n        static closeConnection() {\n            if (connection) {\n                close()\n                connection = null\n                console.log(\"Conexão fechada com sucesso\")\n            }\n        }\n    }\n})()"]}