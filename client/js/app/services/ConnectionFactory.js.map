{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","console","log","_createStore","e","target","result","onsuccess","bind","onerror","error","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH;;;;oDAEsB;AAAA;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BC,wCAAQC,GAAR,CAAY,yBAAZ;AACA,sCAAKC,YAAL,CAAkBC,EAAEC,MAAF,CAASC,MAA3B;AACH,6BAHD;;AAKAV,wCAAYW,SAAZ,GAAwB,aAAK;AACzB,oCAAI,CAAClB,UAAL,EAAiB;AACbA,iDAAae,EAAEC,MAAF,CAASC,MAAtB;AACAhB,4CAAQD,WAAWC,KAAX,CAAiBkB,IAAjB,CAAsBnB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAIE,KAAJ,CAAU,yDAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BATD;;AAWAO,wCAAYa,OAAZ,GAAsB,aAAK;;AAEvBd,uCAAOS,EAAEC,MAAF,CAASK,KAAhB;AACH,6BAHD;AAIH,yBAxBM,CAAP;AAyBH;;;iDAEmBrB,U,EAAY;;AAE5BH,+BAAOyB,OAAP,CAAe,iBAAS;AACpB,gCAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD,OAAOzB,WAAW0B,iBAAX,CAA6BD,KAA7B,CAAP;AACjDzB,uCAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBAHD;AAIH;;;sDAEwB;AACrB,4BAAI5B,UAAJ,EAAgB;AACZC;AACAD,yCAAa,IAAb;AACAY,oCAAQC,GAAR,CAAY,6BAAZ;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes']\nconst version = 7\nconst dbName = 'aluraframe'\n\nlet connection = null\nlet close = null\n\nexport class ConnectionFactory {\n\n    constructor() {\n        throw new Error(\"Connection Factory não pode ser instaciada\")\n    }\n\n    static getConnection() {\n\n        return new Promise((resolve, reject) => {\n\n            let openRequest = window.indexedDB.open(dbName, version)\n\n            openRequest.onupgradeneeded = e => {\n                console.log('interceptando o upgrade')\n                this._createStore(e.target.result)\n            }\n\n            openRequest.onsuccess = e => {\n                if (!connection) {\n                    connection = e.target.result\n                    close = connection.close.bind(connection)\n                    connection.close = function() {\n                        throw new Error('Conexão só pode ser fechada pelo método closeConnection')\n                    }\n                }\n                resolve(connection)\n            }\n\n            openRequest.onerror = e => {\n\n                reject(e.target.error)\n            }\n        })\n    }\n\n    static _createStore(connection) {\n\n        stores.forEach(store => {\n            if (connection.objectStoreNames.contains(store)) return connection.deleteObjectStore(store)\n            connection.createObjectStore(store, { autoIncrement: true })\n        })\n    }\n\n    static closeConnection() {\n        if (connection) {\n            close()\n            connection = null\n            console.log(\"Conexão fechada com sucesso\")\n        }\n    }\n}"]}